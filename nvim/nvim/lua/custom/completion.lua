-- vim.opt.completeopt = { "menu", "menuone", "noselect" }
--
-- require("custom.snippets")
-- -- local cmp = require('cmp')
--
-- local has_words_before = function()
--     unpack = unpack or table.unpack
--     local line, col = unpack(vim.api.nvim_win_get_cursor(0))
--     return col ~= 0 and vim.api.nvim_buf_get_lines(0, line - 1, line, true)[1]:sub(col, col):match("%s") == nil
-- end
--
-- local luasnip = require('luasnip')
-- cmp.setup {
--     snippet = {
--         expand = function(args)
--             luasnip.lsp_expand(args.body)
--         end
--     },
--     sources = cmp.config.sources(
--         {
--             { name = 'nvim_lsp' },
--             -- { name = "codeium" },
--             -- { name = "cody" },
--             { name = 'luasnip' },
--         },
--         {
--             { name = "path" },
--             { name = "buffer", keyword_length = 5 },
--         }
--     ),
--     mapping = {
--         -- ["<C-n>"] = cmp.mapping.select_next_item { behavior = cmp.SelectBehavior.Insert },
--         -- ["<C-p>"] = cmp.mapping.select_prev_item { behavior = cmp.SelectBehavior.Insert },
--         -- ["<CR>"] = cmp.mapping(
--         --     cmp.mapping.confirm {
--         --         behavior = cmp.ConfirmBehavior.Insert,
--         --         select = false,
--         --     },
--         --     { "i", "c" }
--         -- ),
--         ["<Tab>"] = cmp.mapping(function(fallback)
--             if cmp.visible() then
--                 cmp.select_next_item()
--                 -- You could replace the expand_or_jumpable() calls with expand_or_locally_jumpable()
--                 -- they way you will only jump inside the snippet region
--                 -- elseif luasnip.expand_or_jumpable() then
--                 -- luasnip.expand_or_jump()
--             elseif has_words_before() then
--                 cmp.complete()
--             else
--                 fallback()
--             end
--         end, { "i", "s" }),
--         ["<S-Tab>"] = cmp.mapping(function(fallback)
--             if cmp.visible() then
--                 cmp.select_prev_item()
--                 -- elseif luasnip.jumpable(-1) then
--                 -- luasnip.jump(-1)
--             else
--                 fallback()
--             end
--         end, { "i", "s" }),
--         ["<C-Space>"] = cmp.mapping.complete(),
--         ["<CR>"] = cmp.mapping.confirm { select = false },
--         -- ["<down>"] = cmp.mapping.select_next_item { behavior = cmp.SelectBehavior.Select },
--         -- ["<up>"] = cmp.mapping.select_prev_item { behavior = cmp.SelectBehavior.Select },
--         -- ["<left>"] = cmp.mapping.scroll_docs(-4),
--         -- ["<right>"] = cmp.mapping.scroll_docs(4),
--     },
--     sorting = {
--         -- TODO: Would be cool to add stuff like "See variable names before method names" in rust, or something like that.
--         comparators = {
--             cmp.config.compare.offset,
--             cmp.config.compare.exact,
--             cmp.config.compare.score,
--
--             -- copied from cmp-under, but I don't think I need the plugin for this.
--             -- I might add some more of my own.
--             function(entry1, entry2)
--                 local _, entry1_under = entry1.completion_item.label:find "^_+"
--                 local _, entry2_under = entry2.completion_item.label:find "^_+"
--                 entry1_under = entry1_under or 0
--                 entry2_under = entry2_under or 0
--                 if entry1_under > entry2_under then
--                     return false
--                 elseif entry1_under < entry2_under then
--                     return true
--                 end
--             end,
--
--             cmp.config.compare.kind,
--             cmp.config.compare.sort_text,
--             cmp.config.compare.length,
--             cmp.config.compare.order,
--         },
--     },
--     formatting = {
--         -- Youtube: How to set up nice formatting for your sources.
--         format = require('lspkind').cmp_format {
--             with_text = true,
--             menu = {
--                 buffer = "[buf]",
--                 nvim_lsp = "[LSP]",
--                 nvim_lua = "[api]",
--                 path = "[path]",
--                 luasnip = "[snip]"
--                 -- codeium = "[Codeium]",
--             },
--         },
--     },
--
--     experimental = {
--         -- I like the new menu better! Nice work hrsh7th
--         native_menu = false,
--
--         -- Let's play with this for a day or two
--         ghost_text = false,
--     },
-- }
--
-- cmp.setup.cmdline('/', {
--     mapping = cmp.mapping.preset.cmdline(),
--     sources = {
--         { name = 'buffer' }
--     }
-- })
--
-- -- Use cmdline & path source for ':' (if you enabled `native_menu`, this won't work anymore).
-- cmp.setup.cmdline(':', {
--     mapping = cmp.mapping.preset.cmdline(),
--     sources = cmp.config.sources(
--         { { name = 'path' } },
--         { { name = 'cmdline' } }
--     )
-- })
